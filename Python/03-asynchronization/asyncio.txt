event_loop: 事件循环，相当于一个无限循环，可以把函数注册到这个事件循环上，
            当满足某些条件时，函数就会被循环执行

coroutine： 协程对象，可以把协程对象注册到事件循环中，它会被事件循环调用。
            可以使用async来定义一个方法，在调用时不会被立刻执行，而是返
            回一个协程对象

task：      任务，是对协程对象的进一步封装，包含了任务的各个状态

future：    代表来执行或还没有执行的任务，和task没有本质区别

async：     定义一个协程

await：     用来挂起阻塞方法的执行

import asyncio
async def request(url):
    print('正在请求的url是',url)
    print('请求成功',url)
    return url
#async修饰的函数，调用之后返回一个协程对象
c = request("a url")

# 创建一个事件循环对象
loop = asyncio.get_event_loop()
# 将协程对象注册到loop中，然后启动loop
loop.run_until_complete(c)

# task的使用
loop = asyncio.get_event_loop()
# 基于loop创建了一个task对象
task = loop.create_task(c)
loop.run_until_complete(task)

# future的使用
loop = asyncio.get_event_loop()
# 基于loop创建了一个future对象
task = asyncio.ensure_future(c)
loop.run_until_complete(task)

def callback_func(task):
    #result返回的是任务对象中封装的协程对象对应函数的返回值
    print(task.result())
    
#绑定回调
loop = asyncio.get_event_loop()
task = asyncio.ensure_future(c)
#将回调函数绑定到任务对象中
task.add_done_callback(callback_func)
loop.run_until_complete(task)